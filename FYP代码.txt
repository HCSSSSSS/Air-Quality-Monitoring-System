										FYP项目
https://sam.csc.liv.ac.uk/ELEC340/2024/projects/all
										Arduino 发送数据

void setup() {
  Serial.begin(115200);
}

void loop() {
  Serial.println("Hello from Arduino"); // 每秒发送一次
  delay(1000);
}

										打开服务器（终端）

cd C:\Users\Chaos\air-quality-server
node server.js

										
										运行vue前端项目
cd air-quality-frontend
npm run serve

										运行推特发送
cd C:\Users\Chaos\air-quality-server
python tweet_sensor.py

										ESP32打开网页

#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "HCSS";         // 你的 WiFi 名称
const char* password = "123456789"; // 你的 WiFi 密码
const char* serverUrl = "http://192.168.137.1:3000/upload";

// **函数声明**
void sendToServer(String message);

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\n✅ WiFi Connected!");
    Serial.print("📡 IP Address: ");
    Serial.println(WiFi.localIP());
}

void loop() {
    sendToServer("Hello from Arduino");
    delay(5000);  // 每 5 秒发送一次
}

// **定义 sendToServer()**
void sendToServer(String message) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(serverUrl);
        http.addHeader("Content-Type", "application/json");

        // 生成 JSON 数据
        String jsonData = "{\"message\":\"" + message + "\"}";
        Serial.print("📤 Sending JSON: ");
        Serial.println(jsonData);

        int httpResponseCode = http.POST(jsonData);
        Serial.print("📡 HTTP Response Code: ");
        Serial.println(httpResponseCode);

        http.end();
    } else {
        Serial.println("❌ WiFi not connected!");
    }
}


									vue sensor data代码

<template>
    <div class="container">
      <h1>实时传感器数据</h1>
      <div v-if="dataLoaded" class="data-card">
        <div class="data-item">🌡️ 温度: <span>{{ sensorData.temperature ?? '--' }}°C</span></div>
        <div class="data-item">💧 湿度: <span>{{ sensorData.humidity ?? '--' }}%</span></div>
        <div class="data-item">⚠️ CO 浓度: <span>{{ sensorData.arduino?.CO ?? '--' }} ppm</span></div>
        <div class="data-item">☁️ NO₂ 浓度: <span>{{ sensorData.arduino?.NO2 ?? '--' }} ppm</span></div>
        <div class="data-item">🌫️ NH₃ 浓度: <span>{{ sensorData.arduino?.NH3 ?? '--' }} ppm</span></div>
        <div class="timestamp">🕒 最后更新: <span>{{ sensorData.timestamp ?? '--' }}</span></div>
      </div>
      <div v-else class="loading">📡 正在加载数据...</div>
    </div>
  </template>
  
  <script>
  import axios from 'axios';
  
  export default {
    data() {
      return {
        sensorData: {},
        dataLoaded: false
      };
    },
    methods: {
      async fetchData() {
        try {
          const response = await axios.get("http://localhost:3000/data");
          this.sensorData = response.data;
          this.dataLoaded = true;
        } catch (error) {
          console.error("❌ 获取数据失败:", error);
        }
      }
    },
    mounted() {
      this.fetchData(); // 页面加载时获取数据
      setInterval(this.fetchData, 5000); // 每 5 秒更新一次数据
    }
  };
  </script>
  
  <style scoped>
  .container {
    font-family: Arial, sans-serif;
    max-width: 500px;
    margin: 20px auto;
    text-align: center;
  }
  .data-card {
    background: #f5f5f5;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  .data-item {
    font-size: 18px;
    margin: 10px 0;
  }
  .timestamp {
    color: #666;
    font-size: 14px;
  }
  .loading {
    font-size: 18px;
    color: blue;
  }
  </style>
   
                                                    				vue Homeview 代码
<template>
  <div>
    <SensorData />
  </div>
</template>

<script>
import SensorData from '@/components/SensorData.vue';

export default {
  components: {
    SensorData
  }
};
</script>

                                                                            ESP32服务器测试代码

#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "HCSS";         // 你的 WiFi 名称
const char* password = "123456789"; // 你的 WiFi 密码
const char* serverUrl = "http://192.168.137.1:3000/upload";

// **函数声明**
void sendToServer(String message);

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);
  
    Serial.print("🔄 连接 WiFi");
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("\n✅ WiFi 连接成功!");
    Serial.print("📡 IP 地址: ");
    Serial.println(WiFi.localIP());
  }
  
  void loop() {
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      http.begin(serverUrl);
      http.addHeader("Content-Type", "application/json");
  
      // 构造 JSON 数据（模拟传感器数据）
      String jsonPayload = "{"
                            "\"temperature\": 22.5,"
                            "\"humidity\": 60,"
                            "\"arduino\": {"
                            "\"CO\": 0.3,"
                            "\"NO2\": 0.5,"
                            "\"NH3\": 0.1"
                            "},"
                            "\"timestamp\": \"" + String(millis()) + "\""
                            "}";
  
      Serial.print("📤 发送 JSON: ");
      Serial.println(jsonPayload);
  
      int httpResponseCode = http.POST(jsonPayload);
  
      Serial.print("🔄 HTTP 响应码: ");
      Serial.println(httpResponseCode);
  
      http.end();
    } else {
      Serial.println("⚠️ WiFi 未连接!");
    }
  
    delay(2000); // 每 2 秒发送一次数据
  }

                                                                      Arduino MQ2,MICS-6814，MH-Z19B代码

#include <SoftwareSerial.h>
#include <MHZ19.h>

// 传感器引脚定义
#define MQ2_PIN A0      // MQ-2 传感器模拟引脚（可燃气体）
#define CO_PIN A1       // MICS-6814 CO (一氧化碳)
#define NO2_PIN A2      // MICS-6814 NO₂ (二氧化氮)
#define NH3_PIN A3      // MICS-6814 NH₃ (氨气)

// MH-Z19B CO₂ 传感器引脚
#define RX_PIN 10       // Arduino RX (接 MH-Z19 TX)
#define TX_PIN 11       // Arduino TX (接 MH-Z19 RX)

// 软件串口 & MH-Z19B 传感器
SoftwareSerial mySerial(RX_PIN, TX_PIN);
MHZ19 myMHZ19;

void setup() {
    Serial.begin(115200);      // PC 串口监视器
    mySerial.begin(9600);      // MH-Z19 串口
    myMHZ19.begin(mySerial);   // 初始化 MH-Z19B

    Serial.println("Arduino 传感器测试程序启动...");
    delay(3000); // 等待传感器稳定
}

void loop() {
    // 读取 MQ-2 可燃气体传感器
    int mq2Value = analogRead(MQ2_PIN);
    
    // 读取 MICS-6814 多气体传感器
    int coValue = analogRead(CO_PIN);
    int no2Value = analogRead(NO2_PIN);
    int nh3Value = analogRead(NH3_PIN);

    // 读取 MH-Z19B CO₂ 传感器
    int co2ppm = myMHZ19.getCO2();

    // 串口打印输出数据
    Serial.println("====================================");
    Serial.print("可燃气体 (MQ-2): ");
    Serial.println(mq2Value);
    
    Serial.print("CO (MICS-6814): ");
    Serial.println(coValue);

    Serial.print("NO₂ (MICS-6814): ");
    Serial.println(no2Value);

    Serial.print("NH₃ (MICS-6814): ");
    Serial.println(nh3Value);

    Serial.print("CO₂ (MH-Z19B): ");
    Serial.print(co2ppm);
    Serial.println(" ppm");

    Serial.println("====================================");

    // 每 10 秒更新一次
    delay(10000);
}
									ESP32 SDS011
#include <Arduino.h>
#include <SdsDustSensor.h>

// ✅ 硬件串口定义 (使用 ESP32 的 RX3 / TX3)
#define SDS011_RX 25  // 连接 SDS011 TX
#define SDS011_TX 26  // 连接 SDS011 RX

// ✅ 创建 SDS011 传感器对象 (使用硬件串口)
HardwareSerial mySerial(2); // UART2 (RX=GPIO25, TX=GPIO26)
SdsDustSensor sds011(mySerial);

void setup() {
    Serial.begin(115200);
    Serial.println("🔄 正在初始化 SDS011 传感器...");

    // ✅ 启动串口通信
    mySerial.begin(9600, SERIAL_8N1, SDS011_RX, SDS011_TX);

    // ✅ 设置查询模式 (默认是连续输出模式)
    sds011.setActiveReportingMode();
    Serial.println("✅ SDS011 初始化完成！");
}

void loop() {
    // 读取 PM2.5 和 PM10 数据
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
        Serial.printf("🌫️ PM2.5: %.1f µg/m³  |  🌪 PM10: %.1f µg/m³\n", pm.pm25, pm.pm10);
    } else {
        Serial.println("⚠️ 读取 SDS011 失败，请检查连接！");
    }

    delay(10000); // 10秒读取一次
}
									ESP32蜂鸣器和SD卡
#include <Arduino.h>
#include <SPI.h>
#include <SD.h>

#define BUZZER_PIN 16  // 蜂鸣器连接的引脚

void setup() {
    pinMode(BUZZER_PIN, OUTPUT);
    Serial.begin(115200);
    Serial.println("蜂鸣器测试开始...");
}

void loop() {
    Serial.println("蜂鸣器响起...");
    digitalWrite(BUZZER_PIN, HIGH);
    delay(1000);  // 响 1 秒
    Serial.println("蜂鸣器关闭...");
    digitalWrite(BUZZER_PIN, LOW);
    delay(1000);  // 关闭 1 秒
}


#define SD_CS 5  // SD 卡的 CS 片选引脚

void setup() {
    Serial.begin(115200);
    Serial.print("正在初始化 SD 卡...");
    
    if (!SD.begin(SD_CS)) {
        Serial.println("SD 卡初始化失败！");
        return;
    }
    
    Serial.println("SD 卡初始化成功！");
}

void loop() {
}
									Arduino发送数据给ESP32

#include <SoftwareSerial.h>
#include <MHZ19.h>

// 传感器引脚定义
#define MQ2_PIN A0       // MQ-2 (可燃气体)
#define CO_PIN A1        // MICS-6814 CO (一氧化碳)
#define NO2_PIN A2       // MICS-6814 NO₂ (二氧化氮)
#define NH3_PIN A3       // MICS-6814 NH₃ (氨气)

// MH-Z19B CO₂ 传感器引脚
#define RX_PIN 10        // Arduino RX (接 MH-Z19 TX)
#define TX_PIN 11        // Arduino TX (接 MH-Z19 RX)

// 连接 ESP32 的串口
#define ESP_TX 3         // Arduino TX (连接 ESP32 RX)
#define ESP_RX 2         // Arduino RX (连接 ESP32 TX)

// 初始化串口
SoftwareSerial mySerial(RX_PIN, TX_PIN);
SoftwareSerial espSerial(ESP_RX, ESP_TX);
MHZ19 myMHZ19;

void setup() {
    Serial.begin(115200);        // PC 串口监视器
    espSerial.begin(115200);     // 连接 ESP32 的串口
    mySerial.begin(9600);        // MH-Z19B 串口
    myMHZ19.begin(mySerial);     // 初始化 MH-Z19B

    Serial.println("Arduino 启动...");
    delay(3000); // 传感器预热
}

void loop() {
    // 读取 MQ-2 可燃气体传感器
    int mq2Value = analogRead(MQ2_PIN);
    
    // 读取 MICS-6814 多气体传感器
    int coValue = analogRead(CO_PIN);
    int no2Value = analogRead(NO2_PIN);
    int nh3Value = analogRead(NH3_PIN);

    // 读取 MH-Z19B CO₂ 传感器
    int co2ppm = myMHZ19.getCO2();

    // 发送数据给 ESP32
    espSerial.print(mq2Value);
    espSerial.print(",");
    espSerial.print(coValue);
    espSerial.print(",");
    espSerial.print(no2Value);
    espSerial.print(",");
    espSerial.print(nh3Value);
    espSerial.print(",");
    espSerial.println(co2ppm);

    // 在 PC 串口监视器上显示
    Serial.println("====================================");
    Serial.print("可燃气体 (MQ-2): ");
    Serial.println(mq2Value);
    
    Serial.print("CO (MICS-6814): ");
    Serial.println(coValue);

    Serial.print("NO₂ (MICS-6814): ");
    Serial.println(no2Value);

    Serial.print("NH₃ (MICS-6814): ");
    Serial.println(nh3Value);

    Serial.print("CO₂ (MH-Z19B): ");
    Serial.print(co2ppm);
    Serial.println(" ppm");

    Serial.println("====================================");

    // 每 10 秒更新一次
    delay(10000);
}
										ESP32收到所有数据
#include <Arduino.h>

// 连接 Arduino 的串口
#define RX_PIN 4  // ESP32 RX (连接 Arduino TX)
#define TX_PIN 17  // ESP32 TX (连接 Arduino RX)

// 初始化 Serial2（用于和 Arduino 通信）
void setup() {
    Serial.begin(115200);    // ESP32 串口监视器
    Serial2.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN); // 设置 Serial2 串口
    Serial.println("ESP32 开始接收数据...");
}

void loop() {
    if (Serial2.available()) {
        String data = Serial2.readStringUntil('\n');  // 读取 Arduino 发送的数据
        Serial.println("收到数据: " + data);

        // 解析数据
        int values[5];  // 存储传感器数据
        int index = 0;
        char *ptr = strtok((char*)data.c_str(), ",");
        while (ptr != NULL && index < 5) {
            values[index++] = atoi(ptr);
            ptr = strtok(NULL, ",");
        }

        // 确保数据完整
        if (index == 5) {
            Serial.println("====================================");
            Serial.print("可燃气体 (MQ-2): ");
            Serial.println(values[0]);

            Serial.print("CO (MICS-6814): ");
            Serial.println(values[1]);

            Serial.print("NO₂ (MICS-6814): ");
            Serial.println(values[2]);

            Serial.print("NH₃ (MICS-6814): ");
            Serial.println(values[3]);

            Serial.print("CO₂ (MH-Z19B): ");
            Serial.print(values[4]);
            Serial.println(" ppm");

            Serial.println("====================================");
        } else {
            Serial.println("⚠️  数据解析错误!");
        }
    }

    delay(10000);  // 每 10 秒更新一次
}
									ESP32展示数据
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// 连接 Arduino 的串口
#define RX_PIN 4  // ESP32 RX (连接 Arduino TX)
#define TX_PIN 17 // ESP32 TX (连接 Arduino RX)

// OLED 屏幕配置
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        Serial.println(F("⚠️  OLED 显示初始化失败!"));
        for (;;);
    }
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.display();
}

void displaySensorData(int values[]) {
    display.clearDisplay();

    display.setCursor(0, 0);
    display.print("MQ-2: ");
    display.print(values[0]);

    display.setCursor(0, 10);
    display.print("CO: ");
    display.print(values[1]);

    display.setCursor(0, 20);
    display.print("NO2: ");
    display.print(values[2]);

    display.setCursor(0, 30);
    display.print("NH3: ");
    display.print(values[3]);

    display.setCursor(0, 40);
    display.print("CO2: ");
    display.print(values[4]);
    display.print(" ppm");

    display.display();
}

void setup() {
    Serial.begin(115200);
    Serial2.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);
    Serial.println("ESP32 开始接收数据...");
    setupDisplay();
}

void loop() {
    if (Serial2.available()) {
        String data = Serial2.readStringUntil('\n');  
        Serial.println("收到数据: " + data);

        int values[5];  
        int index = 0;
        char *ptr = strtok((char*)data.c_str(), ",");
        while (ptr != NULL && index < 5) {
            values[index++] = atoi(ptr);
            ptr = strtok(NULL, ",");
        }

        if (index == 5) {
            Serial.println("====================================");
            Serial.print("MQ-2: "); Serial.println(values[0]);
            Serial.print("CO: "); Serial.println(values[1]);
            Serial.print("NO2: "); Serial.println(values[2]);
            Serial.print("NH3: "); Serial.println(values[3]);
            Serial.print("CO2: "); Serial.print(values[4]); Serial.println(" ppm");
            Serial.println("====================================");

            displaySensorData(values);
        } else {
            Serial.println("⚠️ 数据解析错误!");
        }
    }
    delay(10000);
}
									ESP32收到所有数据
#include <Arduino.h>
#include <SdsDustSensor.h>

// ========== 引脚定义 ==========
// Arduino 串口
#define ARDUINO_RX_PIN 4   // Arduino TX -> ESP32 GPIO4
#define ARDUINO_TX_PIN 17  // Arduino RX -> ESP32 GPIO17 (若需要双向通信)

// SDS011 串口
#define SDS011_RX_PIN 25   // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26   // SDS011 RX -> ESP32 GPIO26

// ========== 创建 SDS011 传感器对象 ==========
HardwareSerial sdsSerial(1);
SdsDustSensor sds011(sdsSerial);

// 用于保存 Arduino 发来的 5 项数据
int lastArduinoValues[5] = {0, 0, 0, 0, 0};

// 统一数据读取定时（每 10 秒一次）
unsigned long previousTime = 0;
const unsigned long interval = 10000; // 10秒

void setup() {
    Serial.begin(115200);
    Serial.println("===== ESP32: 开始运行 =====");

    // 初始化 Arduino 数据串口 (Serial2)
    Serial2.begin(115200, SERIAL_8N1, ARDUINO_RX_PIN, ARDUINO_TX_PIN);
    Serial.println("Serial2 (Arduino) 初始化成功.");

    // 初始化 SDS011 串口 (HardwareSerial(1))
    sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
    Serial.println("HardwareSerial(1) (SDS011) 初始化成功.");

    // 初始化 SDS011 传感器（根据库的要求，调用对应函数）
    sds011.setActiveReportingMode(); // 或者用 setQueryReportingMode() 视库版本而定

    Serial.println("===== 初始化完成，开始读取数据 =====");
}

void loop() {
    if (millis() - previousTime >= interval) {
        previousTime = millis();

        // ------------- 查询 SDS011 数据 -------------
        PmResult pm = sds011.queryPm();
        if (pm.isOk()) {
            Serial.println("----- SDS011 传感器数据 -----");
            Serial.printf("PM2.5: %.1f µg/m³\n", pm.pm25);
            Serial.printf("PM10 : %.1f µg/m³\n", pm.pm10);
            Serial.println("----------------------------");
        } else {
            Serial.println("SDS011 数据读取失败或无效.");
        }

        // ------------- 读取 Arduino 数据 -------------
        if (Serial2.available()) {
            String data = Serial2.readStringUntil('\n');
            Serial.println("收到 Arduino 数据: " + data);

            // 解析逗号分隔的 5 项数据
            int values[5];
            int index = 0;
            char *ptr = strtok((char*)data.c_str(), ",");
            while (ptr != NULL && index < 5) {
                values[index++] = atoi(ptr);
                ptr = strtok(NULL, ",");
            }
            if (index == 5) {
                for (int i = 0; i < 5; i++) {
                    lastArduinoValues[i] = values[i];
                }
                Serial.println("----- Arduino 传感器数据 -----");
                Serial.printf("MQ-2: %d\n", values[0]);
                Serial.printf("CO  : %d\n", values[1]);
                Serial.printf("NO2 : %d\n", values[2]);
                Serial.printf("NH3 : %d\n", values[3]);
                Serial.printf("CO2 : %d ppm\n", values[4]);
                Serial.println("----------------------------");
            } else {
                Serial.println("⚠️ Arduino 数据解析错误!");
            }
        } else {
            Serial.println("未收到 Arduino 数据.");
        }
    }
    
    // 小延时，防止循环过快
    delay(100);
}
									ESP32展示所有数据
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SdsDustSensor.h>

// ========== OLED 屏幕配置（按照你提供的代码） ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("⚠️  OLED 显示初始化失败!"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

// ========== 串口定义 ==========
#define RX_PIN 4   // ESP32 RX（连接 Arduino TX）
#define TX_PIN 17  // ESP32 TX（连接 Arduino RX）

// SDS011 串口定义
#define SDS011_RX_PIN 25  // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26  // SDS011 RX -> ESP32 GPIO26

// ========== 全局数据变量 ==========
int arduinoValues[5] = {0, 0, 0, 0, 0}; // 存储 Arduino 数据：MQ-2, CO, NO2, NH3, CO2
float pm25 = 0.0, pm10 = 0.0;            // SDS011 数据

// ========== 页面切换控制 ==========
int currentPage = 0;          // 0：Arduino 数据页，1：SDS011 数据页
const int totalPages = 2;     

// ========== 定时器 ==========
unsigned long previousDataTime = 0;
const unsigned long dataInterval = 10000; // 数据刷新周期：10秒

unsigned long previousPageTime = 0;
const unsigned long pageInterval = 5000;    // 页面切换周期：5秒

// ========== OLED 数据显示函数 ==========
// 显示 Arduino 数据页（布局与你提供的代码一致）
void displayArduinoData() {
  display.clearDisplay();

  display.setCursor(0, 0);
  display.print("MQ-2: ");
  display.print(arduinoValues[0]);

  display.setCursor(0, 10);
  display.print("CO: ");
  display.print(arduinoValues[1]);

  display.setCursor(0, 20);
  display.print("NO2: ");
  display.print(arduinoValues[2]);

  display.setCursor(0, 30);
  display.print("NH3: ");
  display.print(arduinoValues[3]);

  display.setCursor(0, 40);
  display.print("CO2: ");
  display.print(arduinoValues[4]);
  display.print(" ppm");

  display.display();
}

// 显示 SDS011 数据页
void displaySDS011Data() {
  display.clearDisplay();

  display.setCursor(0, 0);
  display.print("PM2.5: ");
  display.print(pm25, 1);
  display.print(" ug/m3");

  display.setCursor(0, 10);
  display.print("PM10: ");
  display.print(pm10, 1);
  display.print(" ug/m3");

  display.display();
}

// 根据当前页号更新显示
void updateDisplay() {
  if (currentPage == 0) {
    displayArduinoData();
  } else if (currentPage == 1) {
    displaySDS011Data();
  }
}

// ========== SDS011 传感器对象 ==========
HardwareSerial sdsSerial(1);  // 使用 UART1
SdsDustSensor sds011(sdsSerial);

void setup() {
  Serial.begin(115200);
  Serial.println("ESP32 开始运行...");

  // 初始化 OLED 显示屏
  setupDisplay();

  // 初始化 Arduino 数据串口（Serial2）
  Serial2.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);
  Serial.println("Serial2 (Arduino) 初始化成功.");

  // 初始化 SDS011 串口（使用 HardwareSerial(1)）
  sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
  Serial.println("SDS011 串口初始化成功.");
  sds011.setActiveReportingMode();

  previousDataTime = millis();
  previousPageTime = millis();

  // 初始显示 Arduino 数据页
  currentPage = 0;
  updateDisplay();
}

void loop() {
  unsigned long currentMillis = millis();

  // 每10秒刷新一次数据
  if (currentMillis - previousDataTime >= dataInterval) {
    previousDataTime = currentMillis;

    // 读取 SDS011 数据
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
      pm25 = pm.pm25;
      pm10 = pm.pm10;
      Serial.printf("SDS011: PM2.5=%.1f ug/m3, PM10=%.1f ug/m3\n", pm25, pm10);
    } else {
      Serial.println("SDS011 数据读取失败.");
    }

    // 读取 Arduino 数据（从 Serial2 获取一行逗号分隔的数据）
    if (Serial2.available()) {
      String data = Serial2.readStringUntil('\n');
      Serial.println("收到 Arduino 数据: " + data);
      int values[5];
      int index = 0;
      char *ptr = strtok((char*)data.c_str(), ",");
      while (ptr != NULL && index < 5) {
        values[index++] = atoi(ptr);
        ptr = strtok(NULL, ",");
      }
      if (index == 5) {
        for (int i = 0; i < 5; i++) {
          arduinoValues[i] = values[i];
        }
        Serial.printf("Arduino: %d, %d, %d, %d, %d\n",
                      arduinoValues[0], arduinoValues[1],
                      arduinoValues[2], arduinoValues[3],
                      arduinoValues[4]);
      } else {
        Serial.println("Arduino 数据解析错误!");
      }
    } else {
      Serial.println("未收到 Arduino 数据.");
    }

    // 数据刷新后重置页面为 Arduino 数据页
    currentPage = 0;
    updateDisplay();
    previousPageTime = currentMillis;
  }

  // 每5秒切换一次页面
  if (currentMillis - previousPageTime >= pageInterval) {
    previousPageTime = currentMillis;
    currentPage = (currentPage + 1) % totalPages;
    updateDisplay();
  }

  delay(100);
}
										Server.js代码
const express = require('express'); 
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(bodyParser.json()); // 解析 JSON 数据
app.use(cors());

let sensorData = {};

// 处理 ESP32 数据上传
app.post('/upload', (req, res) => {
  console.log("📩 收到数据:", req.body);

  // 验证数据格式
  if (!req.body || typeof req.body !== 'object') {
    return res.status(400).json({ error: "数据格式错误: 必须为 JSON" });
  }

  sensorData = { ...req.body, timestamp: new Date().toISOString() };
  console.log("✅ 最新数据:", sensorData);
  res.json({ message: "数据接收成功" });
});

// 提供最新数据
app.get('/data', (req, res) => {
  res.json(sensorData);
});

app.listen(3000, () => {
  console.log("🚀 服务器运行在 http://localhost:3000");
});
									前端SensorData.vue
<template>
  <div class="sensor-data">
    <h2>传感器数据</h2>
    <p>MQ-2: {{ sensorData.mq2 }} ppm</p>
    <p>CO: {{ sensorData.co }} ppm</p>
    <p>NO2: {{ sensorData.no2 }} ppb</p>
    <p>NH3: {{ sensorData.nh3 }} ppb</p>
    <p>CO2: {{ sensorData.co2 }} ppm</p>
    <p>PM2.5: {{ sensorData.pm25 }} µg/m³</p>
    <p>PM10: {{ sensorData.pm10 }} µg/m³</p>
    <p v-if="sensorData.timestamp">
      时间: {{ new Date(sensorData.timestamp).toLocaleString() }}
    </p>

    <button @click="fetchData">刷新数据</button>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'SensorData',
  data() {
    return {
      sensorData: {
        mq2: 0,
        co: 0,
        no2: 0,
        nh3: 0,
        co2: 0,
        pm25: 0,
        pm10: 0,
        timestamp: ''
      }
    }
  },
  methods: {
    fetchData() {
      axios.get('http://localhost:3000/data') 
        .then(response => {
          this.sensorData = response.data
        })
        .catch(err => {
          console.error('获取数据失败:', err)
        })
    }
  },
  mounted() {
    // 页面加载时先获取一次数据
    this.fetchData()
    // 每 10 秒刷新一次
    setInterval(this.fetchData, 10000)
  }
}
</script>

<style scoped>
.sensor-data {
  /* 容器整体居中 + 调大字体 */
  text-align: center;     /* 水平居中对齐 */
  font-size: 24px;        /* 整体字体大小 */
  line-height: 1.6;       /* 行间距 */
  max-width: 600px;       /* 可选：设定最大宽度 */
  margin: 0 auto;         /* 居中容器 */
  padding: 20px;          /* 适当留白 */
}

.sensor-data h2 {
  font-size: 28px;        /* 标题更大一点 */
  margin-bottom: 20px;
}

.sensor-data p {
  margin: 8px 0;          /* 段落之间稍微留点间隔 */
}

.sensor-data button {
  font-size: 20px;
  padding: 10px 20px;
  margin-top: 20px;
  cursor: pointer;
}
</style>
									ESP32上传完整代码
#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SdsDustSensor.h>

// ========== 1) WiFi 配置 ==========
const char* ssid = "HCSS";          // 你的 WiFi 名称
const char* password = "123456789"; // 你的 WiFi 密码
const char* serverUrl = "http://192.168.137.1:3000/upload"; // 你的服务器地址

// ========== 2) OLED 屏幕配置（与你提供的代码一致） ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET   -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("⚠️  OLED 显示初始化失败!"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

// ========== 3) 串口定义 ==========
// 3.1) Arduino 数据串口
#define ARDUINO_RX_PIN 4   // Arduino TX -> ESP32 GPIO4
#define ARDUINO_TX_PIN 17  // Arduino RX -> ESP32 GPIO17（若需要双向通信再用）
// 3.2) SDS011 数据串口
#define SDS011_RX_PIN 25   // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26   // SDS011 RX -> ESP32 GPIO26

// ========== 4) 全局数据变量 ==========
// 4.1) Arduino 传感器数据（5 项）
int arduinoValues[5] = {0, 0, 0, 0, 0}; // MQ-2, CO, NO2, NH3, CO2
// 4.2) SDS011 数据
float pm25 = 0.0, pm10 = 0.0;

// ========== 5) 分屏显示控制 ==========
// 两页：0=Arduino 数据页，1=SDS011 数据页
int currentPage = 0;
const int totalPages = 2;

// ========== 6) 定时器 ==========
unsigned long previousDataTime = 0;
const unsigned long dataInterval = 10000; // 每 10 秒刷新一次数据

unsigned long previousPageTime = 0;
const unsigned long pageInterval = 5000;  // 每 5 秒切换一次页面

// ========== 7) OLED 显示函数 ==========
void displayArduinoData() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("MQ-2: ");
  display.print(arduinoValues[0]);

  display.setCursor(0, 10);
  display.print("CO: ");
  display.print(arduinoValues[1]);

  display.setCursor(0, 20);
  display.print("NO2: ");
  display.print(arduinoValues[2]);

  display.setCursor(0, 30);
  display.print("NH3: ");
  display.print(arduinoValues[3]);

  display.setCursor(0, 40);
  display.print("CO2: ");
  display.print(arduinoValues[4]);
  display.print(" ppm");

  display.display();
}

void displaySDS011Data() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("PM2.5: ");
  display.print(pm25, 1);
  display.print(" ug/m3");

  display.setCursor(0, 10);
  display.print("PM10: ");
  display.print(pm10, 1);
  display.print(" ug/m3");

  display.display();
}

void updateDisplay() {
  if (currentPage == 0) {
    displayArduinoData();
  } else {
    displaySDS011Data();
  }
}

// ========== 8) SDS011 传感器对象 ==========
HardwareSerial sdsSerial(1); // 使用硬件串口 UART1
SdsDustSensor sds011(sdsSerial);

// ========== 9) WiFi 发送函数 ==========
void sendToServer() {
  // 构造 JSON 数据，将 Arduino 和 SDS011 数据整合到一起
  // 例如：{"mq2":123,"co":456,"no2":789,"nh3":111,"co2":222,"pm25":3.4,"pm10":5.6}
  String jsonData = "{";
  jsonData += "\"mq2\":"  + String(arduinoValues[0]) + ",";
  jsonData += "\"co\":"   + String(arduinoValues[1]) + ",";
  jsonData += "\"no2\":"  + String(arduinoValues[2]) + ",";
  jsonData += "\"nh3\":"  + String(arduinoValues[3]) + ",";
  jsonData += "\"co2\":"  + String(arduinoValues[4]) + ",";
  jsonData += "\"pm25\":" + String(pm25, 1) + ",";
  jsonData += "\"pm10\":" + String(pm10, 1);
  jsonData += "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    Serial.print("📤 Sending JSON: ");
    Serial.println(jsonData);

    int httpResponseCode = http.POST(jsonData);
    Serial.print("📡 HTTP Response Code: ");
    Serial.println(httpResponseCode);

    http.end();
  } else {
    Serial.println("❌ WiFi not connected!");
  }
}

void setup() {
  // ====== 1) 串口调试 ======
  Serial.begin(115200);
  Serial.println("===== ESP32: Starting =====");

  // ====== 2) OLED 初始化 ======
  setupDisplay();

  // ====== 3) WiFi 连接 ======
  Serial.print("正在连接 WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected!");
  Serial.print("📡 IP Address: ");
  Serial.println(WiFi.localIP());

  // ====== 4) 串口初始化 ======
  // 4.1) Arduino 数据串口 (Serial2)
  Serial2.begin(115200, SERIAL_8N1, ARDUINO_RX_PIN, ARDUINO_TX_PIN);
  Serial.println("Serial2 (Arduino) initialized.");

  // 4.2) SDS011 串口 (HardwareSerial(1))
  sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
  Serial.println("SDS011 串口初始化成功.");

  // ====== 5) SDS011 传感器设置 ======
  sds011.setActiveReportingMode(); // 若需要查询模式，可改为 setQueryReportingMode()

  // ====== 6) 定时器初始化 ======
  previousDataTime = millis();
  previousPageTime = millis();

  // 初次显示 Arduino 数据页
  currentPage = 0;
  updateDisplay();
}

void loop() {
  unsigned long currentMillis = millis();

  // ========== A. 数据刷新：每 10 秒 ==========
  if (currentMillis - previousDataTime >= dataInterval) {
    previousDataTime = currentMillis;

    // 1) 读取 SDS011
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
      pm25 = pm.pm25;
      pm10 = pm.pm10;
      Serial.printf("SDS011: PM2.5=%.1f, PM10=%.1f\n", pm25, pm10);
    } else {
      Serial.println("SDS011 数据读取失败.");
    }

    // 2) 读取 Arduino 数据（从 Serial2）
    if (Serial2.available()) {
      String data = Serial2.readStringUntil('\n');
      Serial.println("收到 Arduino 数据: " + data);
      int values[5];
      int index = 0;
      char *ptr = strtok((char*)data.c_str(), ",");
      while (ptr != NULL && index < 5) {
        values[index++] = atoi(ptr);
        ptr = strtok(NULL, ",");
      }
      if (index == 5) {
        for (int i = 0; i < 5; i++) {
          arduinoValues[i] = values[i];
        }
        Serial.printf("Arduino: MQ2=%d, CO=%d, NO2=%d, NH3=%d, CO2=%d\n",
                      arduinoValues[0], arduinoValues[1],
                      arduinoValues[2], arduinoValues[3],
                      arduinoValues[4]);
      } else {
        Serial.println("Arduino 数据解析错误!");
      }
    } else {
      Serial.println("未收到 Arduino 数据.");
    }

    // 3) 更新 OLED 显示到 Arduino 数据页
    currentPage = 0;
    updateDisplay();
    previousPageTime = currentMillis;

    // 4) 通过 WiFi 发送数据到服务器
    sendToServer();
  }

  // ========== B. 页面切换：每 5 秒 ==========
  if (currentMillis - previousPageTime >= pageInterval) {
    previousPageTime = currentMillis;
    currentPage = (currentPage + 1) % totalPages;
    updateDisplay();
  }

  delay(100);
}
									ESP32最终代码
#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SdsDustSensor.h>
#include <SPI.h>
#include <SD.h>
#include <time.h> // 用于 NTP 时间同步

// ========== 1) WiFi 配置 ==========
const char* ssid = "HCSS";          // 你的 WiFi 名称
const char* password = "123456789"; // 你的 WiFi 密码
const char* serverUrl = "http://192.168.137.1:3000/upload"; // 你的服务器地址

// ========== 2) NTP 配置 ==========
// 可使用你喜欢的 NTP 服务器，如 pool.ntp.org, ntp1.aliyun.com 等
const char* ntpServer = "pool.ntp.org";
// 时区偏移 (秒)，这里是 UTC+8 (中国)，8*3600 = 28800
const long gmtOffset_sec = 8 * 3600;
const int daylightOffset_sec = 0; // 国内一般无夏令时

// ========== 3) OLED 屏幕配置 ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET   -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("⚠️  OLED 显示初始化失败!"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

// ========== 4) 串口定义 ==========
// 4.1) Arduino 数据串口
#define ARDUINO_RX_PIN 4   // Arduino TX -> ESP32 GPIO4
#define ARDUINO_TX_PIN 17  // Arduino RX -> ESP32 GPIO17（若需要双向通信再用）
// 4.2) SDS011 数据串口
#define SDS011_RX_PIN 25   // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26   // SDS011 RX -> ESP32 GPIO26

// ========== 5) 全局数据变量 ==========
// Arduino 传感器数据（5 项: MQ-2, CO, NO2, NH3, CO2）
int arduinoValues[5] = {0, 0, 0, 0, 0};
// SDS011 数据
float pm25 = 0.0, pm10 = 0.0;

// ========== 6) 分屏显示控制 ==========
// 两页：0=Arduino 数据页，1=SDS011 数据页
int currentPage = 0;
const int totalPages = 2;

// ========== 7) 定时器 ==========
unsigned long previousDataTime = 0;
const unsigned long dataInterval = 10000; // 每 10 秒刷新一次数据

unsigned long previousPageTime = 0;
const unsigned long pageInterval = 5000;  // 每 5 秒切换一次页面

// ========== 8) OLED 显示函数 ==========
void displayArduinoData() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("MQ-2: ");
  display.print(arduinoValues[0]);
  display.print(" ppm");

  display.setCursor(0, 10);
  display.print("CO: ");
  display.print(arduinoValues[1]);
  display.print(" ppm");

  display.setCursor(0, 20);
  display.print("NO2: ");
  display.print(arduinoValues[2]);
  display.print(" ppm");

  display.setCursor(0, 30);
  display.print("NH3: ");
  display.print(arduinoValues[3]);
  display.print(" ppm");

  display.setCursor(0, 40);
  display.print("CO2: ");
  display.print(arduinoValues[4]);
  display.print(" ppm");

  display.display();
}

void displaySDS011Data() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("PM2.5: ");
  display.print(pm25, 1);
  display.print(" ug/m3");

  display.setCursor(0, 10);
  display.print("PM10: ");
  display.print(pm10, 1);
  display.print(" ug/m3");

  display.display();
}

void updateDisplay() {
  if (currentPage == 0) {
    displayArduinoData();
  } else {
    displaySDS011Data();
  }
}

// ========== 9) SDS011 传感器对象 ==========
HardwareSerial sdsSerial(1);
SdsDustSensor sds011(sdsSerial);

// ========== 10) WiFi 发送函数 ==========
void sendToServer() {
  // 构造 JSON 数据
  String jsonData = "{";
  jsonData += "\"mq2\":"  + String(arduinoValues[0]) + ",";
  jsonData += "\"co\":"   + String(arduinoValues[1]) + ",";
  jsonData += "\"no2\":"  + String(arduinoValues[2]) + ",";
  jsonData += "\"nh3\":"  + String(arduinoValues[3]) + ",";
  jsonData += "\"co2\":"  + String(arduinoValues[4]) + ",";
  jsonData += "\"pm25\":" + String(pm25, 1) + ",";
  jsonData += "\"pm10\":" + String(pm10, 1);
  jsonData += "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    Serial.print("📤 Sending JSON: ");
    Serial.println(jsonData);

    int httpResponseCode = http.POST(jsonData);
    Serial.print("📡 HTTP Response Code: ");
    Serial.println(httpResponseCode);

    http.end();
  } else {
    Serial.println("❌ WiFi not connected!");
  }
}

// ========== 11) SD 卡配置 ==========
#define SD_CS_PIN 5
bool sdInitialized = false;

// ========== 12) 蜂鸣器阈值报警 ==========
// 假设你使用有源蜂鸣器接 GPIO16，高电平响
#define BUZZER_PIN 16

// 设定报警阈值（可根据需求自行调整单位）
const int THRESHOLD_MQ2    = 400;
const int THRESHOLD_CO     = 500;
const int THRESHOLD_NO2    = 350;
const int THRESHOLD_NH3    = 300;
const int THRESHOLD_CO2    = 800;
const float THRESHOLD_PM25 = 10.0;
const float THRESHOLD_PM10 = 20.0;

bool needAlarm = false;

// ========== 13) NTP 时间同步相关函数 ==========
void setupTime() {
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.print("正在同步网络时间");
  while (true) {
    time_t now = time(nullptr);
    // 简单判断 now 是否大于 1970-01-01
    if (now > 8 * 3600) {
      Serial.println("\n✅ 时间同步成功!");
      break;
    }
    Serial.print(".");
    delay(1000);
  }
}

// ========== 14) 写入 SD 卡函数 ==========
// 写入 CSV: MQ2,CO,NO2,NH3,CO2,PM2.5,PM10,Time
void writeDataToSD() {
  if (!sdInitialized) return;

  File file = SD.open("/sensor_data.csv", FILE_APPEND);
  if (!file) {
    Serial.println("❌ 无法打开 sensor_data.csv 进行写入!");
    return;
  }

  // 如果文件是空的，先写表头
  if (file.size() == 0) {
    file.println("MQ2,CO,NO2,NH3,CO2,PM2.5,PM10,Time");
  }

  // 获取当前本地时间
  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);

  // 格式化时间成字符串，比如 "2025-03-07 12:34:56"
  char timeString[25];
  strftime(timeString, sizeof(timeString), "%F %T", timeinfo);

  // 写 CSV 一行
  file.print(arduinoValues[0]); file.print(",");
  file.print(arduinoValues[1]); file.print(",");
  file.print(arduinoValues[2]); file.print(",");
  file.print(arduinoValues[3]); file.print(",");
  file.print(arduinoValues[4]); file.print(",");
  file.print(pm25, 1);          file.print(",");
  file.print(pm10, 1);          file.print(",");
  file.println(timeString);

  file.close();
  Serial.println("✅ 数据已写入 sensor_data.csv");
}

// ========== 15) setup() 函数 ==========
void setup() {
  Serial.begin(115200);
  Serial.println("===== ESP32: Starting =====");

  // 1) OLED 初始化
  setupDisplay();

  // 2) WiFi 连接
  Serial.print("正在连接 WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected!");
  Serial.print("📡 IP Address: ");
  Serial.println(WiFi.localIP());

  // 3) 同步 NTP 时间
  setupTime();

  // 4) 串口初始化
  // 4.1) Arduino 数据串口 (Serial2)
  Serial2.begin(115200, SERIAL_8N1, ARDUINO_RX_PIN, ARDUINO_TX_PIN);
  Serial.println("Serial2 (Arduino) initialized.");

  // 4.2) SDS011 串口 (HardwareSerial(1))
  sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
  Serial.println("SDS011 串口初始化成功.");

  // 5) SDS011 传感器设置
  sds011.setActiveReportingMode();

  // 6) 初始化定时器
  previousDataTime = millis();
  previousPageTime = millis();

  // 7) 初始化蜂鸣器引脚
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  // 8) 初始化 SD 卡
  Serial.println("尝试初始化 SD 卡...");
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("⚠️ SD 卡初始化失败，后续无法写入文件!");
    sdInitialized = false;
  } else {
    Serial.println("✅ SD 卡初始化成功.");
    sdInitialized = true;
  }

  // 首次显示 Arduino 数据页
  currentPage = 0;
  updateDisplay();
}

// ========== 16) loop() 函数 ==========
void loop() {
  unsigned long currentMillis = millis();

  // A. 数据刷新：每 10 秒
  if (currentMillis - previousDataTime >= dataInterval) {
    previousDataTime = currentMillis;

    // 1) 读取 SDS011
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
      pm25 = pm.pm25;
      pm10 = pm.pm10;
      Serial.printf("SDS011: PM2.5=%.1f, PM10=%.1f\n", pm25, pm10);
    } else {
      Serial.println("SDS011 数据读取失败.");
    }

    // 2) 读取 Arduino 数据（从 Serial2）
    if (Serial2.available()) {
      String data = Serial2.readStringUntil('\n');
      Serial.println("收到 Arduino 数据: " + data);
      int values[5];
      int index = 0;
      char *ptr = strtok((char*)data.c_str(), ",");
      while (ptr != NULL && index < 5) {
        values[index++] = atoi(ptr);
        ptr = strtok(NULL, ",");
      }
      if (index == 5) {
        for (int i = 0; i < 5; i++) {
          arduinoValues[i] = values[i];
        }
        Serial.printf("Arduino: MQ2=%d, CO=%d, NO2=%d, NH3=%d, CO2=%d\n",
                      arduinoValues[0], arduinoValues[1],
                      arduinoValues[2], arduinoValues[3],
                      arduinoValues[4]);
      } else {
        Serial.println("Arduino 数据解析错误!");
      }
    } else {
      Serial.println("未收到 Arduino 数据.");
    }

    // 3) 更新 OLED 显示到 Arduino 数据页
    currentPage = 0;
    updateDisplay();
    previousPageTime = currentMillis;

    // 4) 通过 WiFi 发送数据到服务器
    sendToServer();

    // 5) 写入 SD 卡（带 NTP 时间）
    writeDataToSD();

    // 6) 判断是否需要报警
    needAlarm = false;
    if (arduinoValues[0] > THRESHOLD_MQ2)  needAlarm = true; // MQ2
    if (arduinoValues[1] > THRESHOLD_CO)   needAlarm = true; // CO
    if (arduinoValues[2] > THRESHOLD_NO2)  needAlarm = true; // NO2
    if (arduinoValues[3] > THRESHOLD_NH3)  needAlarm = true; // NH3
    if (arduinoValues[4] > THRESHOLD_CO2)  needAlarm = true; // CO2
    if (pm25 > THRESHOLD_PM25)             needAlarm = true; // PM2.5
    if (pm10 > THRESHOLD_PM10)             needAlarm = true; // PM10

    if (needAlarm) {
      Serial.println("⚠️ 传感器数值超过阈值，报警!");
      digitalWrite(BUZZER_PIN, HIGH);
    } else {
      Serial.println("数值正常，无需报警.");
      digitalWrite(BUZZER_PIN, LOW);
    }
  }

  // B. 页面切换：每 5 秒
  if (currentMillis - previousPageTime >= pageInterval) {
    previousPageTime = currentMillis;
    currentPage = (currentPage + 1) % totalPages;
    updateDisplay();
  }

  delay(100);
}
                                                                           server.js更新
// server.js
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(bodyParser.json()); // 解析 JSON 数据
app.use(cors());

// 全局存储传感器数据
let sensorData = {};

// 处理 ESP32 数据上传
app.post('/upload', (req, res) => {
  console.log("📩 收到数据:", req.body);

  // 验证数据格式
  if (!req.body || typeof req.body !== 'object') {
    return res.status(400).json({ error: "数据格式错误: 必须为 JSON" });
  }

  // 给数据加个时间戳
  sensorData = { ...req.body, timestamp: new Date().toISOString() };
  console.log("✅ 最新数据:", sensorData);
  res.json({ message: "数据接收成功" });
});

// 提供最新数据
app.get('/data', (req, res) => {
  res.json(sensorData);
});

// 监听 3000 端口，绑定到 0.0.0.0（即所有网卡）
const PORT = 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 服务器运行在 http://0.0.0.0:${PORT}`);
  console.log(`也可通过你的局域网 IP (如 http://192.168.137.1:${PORT}) 访问`);
});
										SensorData.vue更新
<template>
  <div class="sensor-data">
    <h2>传感器数据</h2>
    <p>MQ-2: {{ sensorData.mq2 }} ppm</p>
    <p>CO: {{ sensorData.co }} ppm</p>
    <p>NO2: {{ sensorData.no2 }} ppb</p>
    <p>NH3: {{ sensorData.nh3 }} ppb</p>
    <p>CO2: {{ sensorData.co2 }} ppm</p>
    <p>PM2.5: {{ sensorData.pm25 }} µg/m³</p>
    <p>PM10: {{ sensorData.pm10 }} µg/m³</p>
    <p v-if="sensorData.timestamp">
      时间: {{ new Date(sensorData.timestamp).toLocaleString() }}
    </p>

    <button @click="fetchData">刷新数据</button>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'SensorData',
  data() {
    return {
      sensorData: {
        mq2: 0,
        co: 0,
        no2: 0,
        nh3: 0,
        co2: 0,
        pm25: 0,
        pm10: 0,
        timestamp: ''
      }
    }
  },
  methods: {
    fetchData() {
      // 改为你的电脑局域网 IP
      axios.get('http://192.168.137.1:3000/data')
        .then(response => {
          this.sensorData = response.data
        })
        .catch(err => {
          console.error('获取数据失败:', err)
        })
    }
  },
  mounted() {
    // 页面加载时先获取一次数据
    this.fetchData()
    // 每 10 秒刷新一次
    setInterval(this.fetchData, 10000)
  }
}
</script>

<style scoped>
.sensor-data {
  text-align: center;
  font-size: 24px;
  line-height: 1.6;
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.sensor-data h2 {
  font-size: 28px;
  margin-bottom: 20px;
}

.sensor-data p {
  margin: 8px 0;
}

.sensor-data button {
  font-size: 20px;
  padding: 10px 20px;
  margin-top: 20px;
  cursor: pointer;
}
</style>
											APP.vue
<template>
  <nav>
    <router-link to="/">Home</router-link> |
    <router-link to="/about">About</router-link>
  </nav>
  <router-view/>
</template>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
}

nav {
  padding: 30px;
}

nav a {
  font-weight: bold;
  color: #2c3e50;
}

nav a.router-link-exact-active {
  color: #42b983;
}
</style>
									发送推特python代码
import tweepy
import requests
import time

# ===== Twitter API Credentials =====
API_KEY = "riyh19wa6IgBUKD5GJ18fQqKl"
API_SECRET = "vN61tj78xAYyKsipy4DLUEqaWSABMB1byvV2e2gbLHDo3GScmT"
ACCESS_TOKEN = "1901762964652265472-W0PPKMqxQuIQdqVhfuoTHO0tTYDBxD"
ACCESS_TOKEN_SECRET = "917zEhhM51nFLbTYryreh741ZLJL9GQmSG80qya0sVHm6"

# ===== 服务器数据接口 =====
# 请确保该地址与你的服务器实际地址一致
SERVER_DATA_URL = "http://192.168.137.1:3000/data"

def get_sensor_data():
    """
    从服务器获取最新的传感器数据（JSON格式）
    """
    try:
        response = requests.get(SERVER_DATA_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data
    except Exception as e:
        print("Error fetching sensor data:", e)
        return None

def format_tweet(data):
    """
    将传感器数据格式化成推文文本
    """
    if not data:
        return "No sensor data available."
    tweet = (
        f"Sensor Data:\n"
        f"MQ-2: {data.get('mq2', 'N/A')} ppm\n"
        f"CO: {data.get('co', 'N/A')} ppm\n"
        f"NO2: {data.get('no2', 'N/A')} ppb\n"
        f"NH3: {data.get('nh3', 'N/A')} ppb\n"
        f"CO2: {data.get('co2', 'N/A')} ppm\n"
        f"PM2.5: {data.get('pm25', 'N/A')} µg/m³\n"
        f"PM10: {data.get('pm10', 'N/A')} µg/m³\n"
        f"Time: {data.get('timestamp', 'N/A')}"
    )
    return tweet

def post_tweet(api, tweet_text):
    """
    使用 Twitter API 发布推文
    """
    try:
        api.update_status(tweet_text)
        print("Tweet posted successfully!")
    except Exception as e:
        print("Error posting tweet:", e)

def main():
    # 设置 Twitter API 认证
    auth = tweepy.OAuth1UserHandler(API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
    api = tweepy.API(auth)
    
    # 主循环：每小时获取一次数据并发布推文
    while True:
        sensor_data = get_sensor_data()
        tweet_text = format_tweet(sensor_data)
        print("Tweet content:\n", tweet_text)
        post_tweet(api, tweet_text)
        # 每3600秒（1小时）发布一次，可根据需要修改间隔
        time.sleep(3600)

if __name__ == "__main__":
    main()

										ESP32代码修改
#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SdsDustSensor.h>
#include <SPI.h>
#include <SD.h>
#include <time.h> // For NTP time sync

// ========== 1) WiFi Configuration ==========
const char* ssid = "HCSS";          // Your WiFi SSID
const char* password = "123456789"; // Your WiFi Password
const char* serverUrl = "http://192.168.137.1:3000/upload"; // Your server address

// ========== 2) NTP Configuration ==========
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 8 * 3600;  // UTC+8 for China
const int daylightOffset_sec = 0;     // Typically no DST in China

// ========== 3) OLED Display Configuration ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET   -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("⚠️ OLED display initialization failed!"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

// ========== 4) Serial Definitions ==========
// 4.1) Arduino data serial (Serial2)
#define ARDUINO_RX_PIN 4   // Arduino TX -> ESP32 GPIO4
#define ARDUINO_TX_PIN 17  // Arduino RX -> ESP32 GPIO17
// 4.2) SDS011 sensor serial
#define SDS011_RX_PIN 25   // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26   // SDS011 RX -> ESP32 GPIO26

// ========== 5) Global Variables ==========
// Arduino sensor data (order: MQ-2, CO, NO2, NH3, CO2)
int arduinoValues[5] = {0, 0, 0, 0, 0};
// SDS011 data
float pm25 = 0.0, pm10 = 0.0;

// ========== 6) Display Page Control ==========
int currentPage = 0;
const int totalPages = 2;

// ========== 7) Timers ==========
unsigned long previousDataTime = 0;
const unsigned long dataInterval = 10000; // Refresh data every 10 seconds

unsigned long previousPageTime = 0;
const unsigned long pageInterval = 5000;  // Change display page every 5 seconds

// ========== 8) OLED Display Functions ==========
void displayArduinoData() {
  display.clearDisplay();
  display.setCursor(0, 0);
  // MQ-2: Display raw value (unit depends on calibration, here assume "ppm")
  display.print("MQ-2: ");
  display.print(arduinoValues[0]);
  display.print(" ppm");

  // CO: Multiply by 0.1, unit: ppm
  display.setCursor(0, 10);
  display.print("CO: ");
  display.print(arduinoValues[1] * 0.1);
  display.print(" ppm");

  // NO2: Multiply by 0.1, unit: ppb (assuming front-end uses ppb for NO2)
  display.setCursor(0, 20);
  display.print("NO2: ");
  display.print(arduinoValues[2] * 0.1);
  display.print(" ppb");

  // NH3: Display raw value, unit: ppm (adjust if needed)
  display.setCursor(0, 30);
  display.print("NH3: ");
  display.print(arduinoValues[3]);
  display.print(" ppb");

  // CO2: Divide by 2, unit: ppm
  display.setCursor(0, 40);
  display.print("CO2: ");
  display.print(arduinoValues[4] / 2);
  display.print(" ppm");

  display.display();
}

void displaySDS011Data() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("PM2.5: ");
  display.print(pm25, 1);
  display.print(" ug/m3");

  display.setCursor(0, 10);
  display.print("PM10: ");
  display.print(pm10, 1);
  display.print(" ug/m3");

  display.display();
}

void updateDisplay() {
  if (currentPage == 0) {
    displayArduinoData();
  } else {
    displaySDS011Data();
  }
}

// ========== 9) SDS011 Sensor Object ==========
HardwareSerial sdsSerial(1);
SdsDustSensor sds011(sdsSerial);

// ========== 10) WiFi Data Upload Function ==========
void sendToServer() {
  // Construct JSON data with modifications:
  // CO is multiplied by 0.1, NO2 by 0.1, CO2 is divided by 2
  String jsonData = "{";
  jsonData += "\"mq2\":"  + String(arduinoValues[0]) + ",";
  jsonData += "\"co\":"   + String(arduinoValues[1] * 0.1) + ",";
  jsonData += "\"no2\":"  + String(arduinoValues[2] * 0.1) + ",";
  jsonData += "\"nh3\":"  + String(arduinoValues[3]) + ",";
  jsonData += "\"co2\":"  + String(arduinoValues[4] / 2) + ",";
  jsonData += "\"pm25\":" + String(pm25, 1) + ",";
  jsonData += "\"pm10\":" + String(pm10, 1);
  jsonData += "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    Serial.print("📤 Sending JSON: ");
    Serial.println(jsonData);

    int httpResponseCode = http.POST(jsonData);
    Serial.print("📡 HTTP Response Code: ");
    Serial.println(httpResponseCode);

    http.end();
  } else {
    Serial.println("❌ WiFi not connected!");
  }
}

// ========== 11) SD Card Setup ==========
#define SD_CS_PIN 5
bool sdInitialized = false;

// ========== 12) Buzzer Alarm Configuration ==========
#define BUZZER_PIN 16 // Active buzzer on GPIO16, HIGH level triggers sound

// Thresholds (units as per sensor calibration)
const int THRESHOLD_MQ2    = 400;
const int THRESHOLD_CO     = 500;
const int THRESHOLD_NO2    = 350;
const int THRESHOLD_NH3    = 300;
const int THRESHOLD_CO2    = 800;
const float THRESHOLD_PM25 = 10.0;
const float THRESHOLD_PM10 = 20.0;

bool needAlarm = false;

// ========== 13) NTP Time Synchronization ==========
void setupTime() {
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.print("Synchronizing network time");
  while (true) {
    time_t now = time(nullptr);
    if (now > 8 * 3600) {  // Simple check: time > 1970-01-01
      Serial.println("\n✅ Time synchronized!");
      break;
    }
    Serial.print(".");
    delay(1000);
  }
}

// ========== 14) SD Card Write Function ==========
void writeDataToSD() {
  if (!sdInitialized) return;

  File file = SD.open("/sensor_data.csv", FILE_APPEND);
  if (!file) {
    Serial.println("❌ Unable to open sensor_data.csv for writing!");
    return;
  }

  // Write header if file is empty
  if (file.size() == 0) {
    file.println("MQ2,CO,NO2,NH3,CO2,PM2.5,PM10,Time");
  }

  // Get current local time
  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  char timeString[25];
  strftime(timeString, sizeof(timeString), "%F %T", timeinfo);

  // Write CSV line: note that modifications are done only for display/server
  // Here we log the raw sensor values. You may log the adjusted values if needed.
  file.print(arduinoValues[0]); file.print(",");
  file.print(arduinoValues[1]); file.print(",");
  file.print(arduinoValues[2]); file.print(",");
  file.print(arduinoValues[3]); file.print(",");
  file.print(arduinoValues[4]); file.print(",");
  file.print(pm25, 1);          file.print(",");
  file.print(pm10, 1);          file.print(",");
  file.println(timeString);

  file.close();
  Serial.println("✅ Data written to sensor_data.csv");
}

// ========== 15) setup() Function ==========
void setup() {
  Serial.begin(115200);
  Serial.println("===== ESP32: Starting =====");

  // 1) Initialize OLED display
  setupDisplay();

  // 2) Connect to WiFi
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected!");
  Serial.print("📡 IP Address: ");
  Serial.println(WiFi.localIP());

  // 3) Synchronize NTP time
  setupTime();

  // 4) Initialize serial ports
  // 4.1) Arduino data serial (Serial2)
  Serial2.begin(115200, SERIAL_8N1, ARDUINO_RX_PIN, ARDUINO_TX_PIN);
  Serial.println("Serial2 (Arduino) initialized.");

  // 4.2) SDS011 serial (HardwareSerial(1))
  sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
  Serial.println("SDS011 serial initialized.");

  // 5) Set SDS011 to active reporting mode
  sds011.setActiveReportingMode();

  // 6) Initialize timers
  previousDataTime = millis();
  previousPageTime = millis();

  // 7) Initialize buzzer pin
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  // 8) Initialize SD card
  Serial.println("Initializing SD card...");
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("⚠️ SD card initialization failed. File logging disabled!");
    sdInitialized = false;
  } else {
    Serial.println("✅ SD card initialized.");
    sdInitialized = true;
  }

  // Display the first page (Arduino data)
  currentPage = 0;
  updateDisplay();
}

// ========== 16) loop() Function ==========
void loop() {
  unsigned long currentMillis = millis();

  // A. Data refresh every 10 seconds
  if (currentMillis - previousDataTime >= dataInterval) {
    previousDataTime = currentMillis;

    // 1) Read SDS011 data (PM2.5 and PM10)
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
      pm25 = pm.pm25;
      pm10 = pm.pm10;
      Serial.printf("SDS011: PM2.5=%.1f, PM10=%.1f\n", pm25, pm10);
    } else {
      Serial.println("SDS011 data read failed.");
    }

    // 2) Read Arduino data from Serial2
    if (Serial2.available()) {
      String data = Serial2.readStringUntil('\n');
      Serial.println("Received Arduino data: " + data);
      int values[5];
      int index = 0;
      char *ptr = strtok((char*)data.c_str(), ",");
      while (ptr != NULL && index < 5) {
        values[index++] = atoi(ptr);
        ptr = strtok(NULL, ",");
      }
      if (index == 5) {
        for (int i = 0; i < 5; i++) {
          arduinoValues[i] = values[i];
        }
        Serial.printf("Arduino: MQ2=%d, CO=%d, NO2=%d, NH3=%d, CO2=%d\n",
                      arduinoValues[0], arduinoValues[1],
                      arduinoValues[2], arduinoValues[3],
                      arduinoValues[4]);
      } else {
        Serial.println("Arduino data parse error!");
      }
    } else {
      Serial.println("No Arduino data received.");
    }

    // 3) Update OLED display to show Arduino data
    currentPage = 0;
    updateDisplay();
    previousPageTime = currentMillis;

    // 4) Send data to server (with modified values)
    sendToServer();

    // 5) Write data to SD card (raw values, with timestamp)
    writeDataToSD();

    // 6) Check for alarm condition
    needAlarm = false;
    if (arduinoValues[0] > THRESHOLD_MQ2) needAlarm = true;
    if (arduinoValues[1] > THRESHOLD_CO)  needAlarm = true;
    if (arduinoValues[2] > THRESHOLD_NO2) needAlarm = true;
    if (arduinoValues[3] > THRESHOLD_NH3) needAlarm = true;
    if (arduinoValues[4] > THRESHOLD_CO2) needAlarm = true;
    if (pm25 > THRESHOLD_PM25)            needAlarm = true;
    if (pm10 > THRESHOLD_PM10)            needAlarm = true;

    if (needAlarm) {
      Serial.println("⚠️ Sensor values exceed thresholds, triggering alarm!");
      digitalWrite(BUZZER_PIN, HIGH);
    } else {
      Serial.println("Sensor values are normal, no alarm.");
      digitalWrite(BUZZER_PIN, LOW);
    }
  }

  // B. Page switching every 5 seconds
  if (currentMillis - previousPageTime >= pageInterval) {
    previousPageTime = currentMillis;
    currentPage = (currentPage + 1) % totalPages;
    updateDisplay();
  }

  delay(100);
}
                                                                       APP.vue更新
<template>
  <div id="app">
    <nav style="padding: 10px; background: #eee;">
      <router-link to="/">Home</router-link>
    </nav>
    <!-- Router view, if you have multiple pages -->
    <router-view />

    <!-- Single unified AirQualityDashboard component -->
    <AirQualityDashboard />
  </div>
</template>

<script>
import AirQualityDashboard from './components/AirQualityDashboard.vue'
// You can remove or comment out the import for SensorData.vue
// import SensorData from './components/SensorData.vue'

export default {
  name: 'App',
  components: {
    AirQualityDashboard
    // SensorData
  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  text-align: center;
  color: #2c3e50;
  margin-top: 0;
}
nav a {
  margin: 0 10px;
  font-weight: bold;
  color: #2c3e50;
}
nav a.router-link-exact-active {
  color: #42b983;
}
</style>

						AirqualityDashboard.vue更新
<template>
  <div class="dashboard-container">
    <!-- Left side: chart -->
    <div class="left-section">
      <line-chart :chart-data="chartData" :options="chartOptions" />
    </div>

    <!-- Right side: sensor data + WHO table -->
    <div class="right-section">
      <div class="sensor-section">
        <h3>Current Sensor Data</h3>
        <table class="sensor-table">
          <tbody>
            <tr><td>Combustible Gas:</td><td>{{ sensorData.mq2 }} ppm</td></tr>
            <tr><td>CO:</td><td>{{ sensorData.co }} ppm</td></tr>
            <tr><td>NO2:</td><td>{{ sensorData.no2 }} ppb</td></tr>
            <tr><td>NH3:</td><td>{{ sensorData.nh3 }} ppb</td></tr>
            <tr><td>CO2:</td><td>{{ sensorData.co2 }} ppm</td></tr>
            <tr><td>PM2.5:</td><td>{{ sensorData.pm25 }} µg/m³</td></tr>
            <tr><td>PM10:</td><td>{{ sensorData.pm10 }} µg/m³</td></tr>
            <tr v-if="sensorData.timestamp">
              <td>Time:</td>
              <td>{{ new Date(sensorData.timestamp).toLocaleString() }}</td>
            </tr>
          </tbody>
        </table>
        <button @click="fetchSensorData">Refresh Data</button>
      </div>

      <div class="who-section">
        <h3>WHO Reference Data</h3>
        <table>
          <thead>
            <tr>
              <th>Parameter</th>
              <th>WHO Standard</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(item, idx) in whoData" :key="idx">
              <td>{{ item.param }}</td>
              <td>{{ item.standard }}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios'
import { Line } from 'vue-chartjs'
import {
  Chart as ChartJS,
  Title,
  Tooltip,
  Legend,
  LineElement,
  PointElement,
  CategoryScale,
  LinearScale
} from 'chart.js'

// Register Chart.js components
ChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale)

// A simple LineChart component for rendering
const LineChart = {
  extends: Line,
  props: ['chartData', 'options'],
  mounted() {
    this.renderChart(this.chartData, this.options)
  },
  watch: {
    chartData(newVal) {
      this.renderChart(newVal, this.options)
    }
  }
}

export default {
  name: 'AirQualityDashboard',
  components: {
    'line-chart': LineChart
  },
  data() {
    return {
      // Chart data
      chartData: {
        labels: [],
        datasets: [
          {
            label: 'PM2.5 (µg/m³)',
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            fill: false,
            data: []
          },
          {
            label: 'PM10 (µg/m³)',
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            fill: false,
            data: []
          }
        ]
      },
      chartOptions: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: { display: true, text: 'Time' }
          },
          y: {
            title: { display: true, text: 'Concentration' }
          }
        }
      },
      // WHO reference data
      whoData: [
      { param: 'Combustible Gas', standard: 'Recommended < 300 ppm' },
      { param: 'CO',    standard: '15 min: 87 ppm, 1 hr: 30 ppm, 8 hr: 9 ppm, 24 hr: 6 ppm' },
      { param: 'NO2',   standard: '1h: ~106 ppb, Annual: ~21 ppb' },
      { param: 'NH3',   standard: 'recommended < 1000 ppb' },
      { param: 'CO2',   standard: 'Recommended < 1000 ppm' },
      { param: 'PM2.5', standard: '24h: 25 µg/m³, Annual: 10 µg/m³' },
      { param: 'PM10',  standard: '24h: 50 µg/m³, Annual: 20 µg/m³' }

      ],
      // Current sensor data
      sensorData: {
        mq2: 0,
        co: 0,
        no2: 0,
        nh3: 0,
        co2: 0,
        pm25: 0,
        pm10: 0,
        timestamp: ''
      }
    }
  },
  methods: {
    fetchSensorData() {
      axios.get('http://192.168.137.1:3000/data') // Use your local IP if needed
        .then(res => {
          const data = res.data
          this.sensorData = data

          // Add a new time label
          const label = data.timestamp 
            ? new Date(data.timestamp).toLocaleTimeString() 
            : new Date().toLocaleTimeString()

          // Push new PM2.5, PM10 data
          this.chartData.labels.push(label)
          this.chartData.datasets[0].data.push(data.pm25) // PM2.5
          this.chartData.datasets[1].data.push(data.pm10) // PM10

          // Keep only the last 10 data points
          if (this.chartData.labels.length > 10) {
            this.chartData.labels.shift()
            this.chartData.datasets.forEach(ds => ds.data.shift())
          }
        })
        .catch(err => {
          console.error('Error fetching sensor data:', err)
        })
    },
    startTimer() {
      // Fetch data every 5 seconds
      setInterval(() => {
        this.fetchSensorData()
      }, 5000)
    }
  },
  mounted() {
    // Fetch data once on component mount
    this.fetchSensorData()
    // Start auto-refresh
    this.startTimer()
  }
}
</script>

<style scoped>
.dashboard-container {
  display: flex;
  gap: 20px;
  /* set a height if needed */
  min-height: 400px;
}

/* Left side: chart */
.left-section {
  flex: 1;
  border: 1px solid #ccc;
  position: relative;
}

/* Right side: sensor data + WHO table in vertical layout */
.right-section {
  width: 350px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* Sensor data table */
.sensor-section {
  border: 1px solid #ccc;
  padding: 10px;
}

.sensor-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 10px;
}
.sensor-table td {
  padding: 4px 8px;
}

/* WHO reference table */
.who-section {
  border: 1px solid #ccc;
  padding: 10px;
}
.who-section table {
  width: 100%;
  border-collapse: collapse;
}
.who-section th, .who-section td {
  border: 1px solid #aaa;
  padding: 6px;
  text-align: left;
}
</style>
									ESP32代码修改
#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SdsDustSensor.h>
#include <SPI.h>
#include <SD.h>
#include <time.h> // 用于 NTP 时间同步

// ========== 1) WiFi 配置 ==========
const char* ssid = "HCSS";          // 你的 WiFi 名称
const char* password = "123456789"; // 你的 WiFi 密码
const char* serverUrl = "http://192.168.137.1:3000/upload"; // 你的服务器地址

// ========== 2) NTP 配置 ==========
const char* ntpServer = "pool.ntp.org"; // NTP 服务器
const long gmtOffset_sec = 8 * 3600;      // UTC+8 (中国)
const int daylightOffset_sec = 0;         // 无夏令时

// ========== 3) OLED 屏幕配置 ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET   -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F(" OLED 显示初始化失败!"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

// ========== 4) 串口定义 ==========
#define ARDUINO_RX_PIN 4   // Arduino TX -> ESP32 GPIO4
#define ARDUINO_TX_PIN 17  // Arduino RX -> ESP32 GPIO17
#define SDS011_RX_PIN 25   // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26   // SDS011 RX -> ESP32 GPIO26

// ========== 5) 全局变量 ==========
int arduinoValues[5] = {0, 0, 0, 0, 0}; // 传感器数据：MQ-2, CO, NO2, NH3, CO2
float pm25 = 0.0, pm10 = 0.0;           // SDS011 数据

// ========== 6) 定时器 ==========
unsigned long previousDataTime = 0;
const unsigned long dataInterval = 10000; // 每 10 秒刷新一次数据
unsigned long previousPageTime = 0;
const unsigned long pageInterval = 5000;  // 每 5 秒切换一次显示页面

// ========== 7) OLED 显示函数 ==========
void displayArduinoData() {
  display.clearDisplay();

  display.setCursor(0, 0);
  display.print("MQ-2: ");
  display.print(arduinoValues[0]);
  display.print(" ppm");

  display.setCursor(0, 10);
  display.print("CO: ");
  display.print(arduinoValues[1]);
  display.print(" ppm");

  display.setCursor(0, 20);
  display.print("NO2: ");
  display.print(arduinoValues[2]);
  display.print(" ppm");

  display.setCursor(0, 30);
  display.print("NH3: ");
  display.print(arduinoValues[3]);
  display.print(" ppm");

  display.setCursor(0, 40);
  display.print("CO2: ");
  display.print(arduinoValues[4]);
  display.print(" ppm");

  display.display();
}

void displaySDS011Data() {
  display.clearDisplay();

  display.setCursor(0, 0);
  display.print("PM2.5: ");
  display.print(pm25, 1);
  display.print(" ug/m3");

  display.setCursor(0, 10);
  display.print("PM10: ");
  display.print(pm10, 1);
  display.print(" ug/m3");

  display.display();
}

void updateDisplay() {
  // 本例中只显示 Arduino 数据
  displayArduinoData();
}

// ========== 8) SDS011 传感器对象 ==========
HardwareSerial sdsSerial(1);
SdsDustSensor sds011(sdsSerial);

// ========== 9) WiFi 数据上传函数 ==========
void sendToServer() {
  // 构造 JSON 数据 (此处已应用前面校正的逻辑)
  String jsonData = "{";
  jsonData += "\"mq2\":"  + String(arduinoValues[0]) + ",";
  jsonData += "\"co\":"   + String(arduinoValues[1] * 0.1) + ",";
  jsonData += "\"no2\":"  + String(arduinoValues[2] * 0.1) + ",";
  jsonData += "\"nh3\":"  + String(arduinoValues[3]) + ",";
  jsonData += "\"co2\":"  + String(arduinoValues[4] / 2) + ",";
  jsonData += "\"pm25\":" + String(pm25, 1) + ",";
  jsonData += "\"pm10\":" + String(pm10, 1);
  jsonData += "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    Serial.print(" Sending JSON: ");
    Serial.println(jsonData);

    int httpResponseCode = http.POST(jsonData);
    Serial.print(" HTTP Response Code: ");
    Serial.println(httpResponseCode);

    http.end();
  } else {
    Serial.println(" WiFi not connected!");
  }
}

// ========== 10) SD 卡配置 ==========
#define SD_CS_PIN 5
bool sdInitialized = false;

// ========== 11) 蜂鸣器配置 ==========
#define BUZZER_PIN 16  // 蜂鸣器连接到 GPIO16

// 设置报警阈值（单位由各传感器校准后确定）
const int THRESHOLD_MQ2    = 600;
const int THRESHOLD_CO     = 1000;
const int THRESHOLD_NO2    = 1500;
const int THRESHOLD_NH3    = 1200;
const int THRESHOLD_CO2    = 1200;
const float THRESHOLD_PM25 = 25.0;
const float THRESHOLD_PM10 = 50.0;

bool needAlarm = false;

// ========== 12) NTP 时间同步 ==========
void setupTime() {
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.print("正在同步网络时间");
  while (true) {
    time_t now = time(nullptr);
    if (now > 8 * 3600) {  // 简单判断是否同步成功
      Serial.println("\n 时间同步成功!");
      break;
    }
    Serial.print(".");
    delay(1000);
  }
}

// ========== 13) SD 卡写入函数 ==========
void writeDataToSD() {
  if (!sdInitialized) return;

  File file = SD.open("/sensor_data.csv", FILE_APPEND);
  if (!file) {
    Serial.println(" 无法打开 sensor_data.csv 进行写入!");
    return;
  }

  if (file.size() == 0) {
    file.println("MQ2,CO,NO2,NH3,CO2,PM2.5,PM10,Time");
  }

  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  char timeString[25];
  strftime(timeString, sizeof(timeString), "%F %T", timeinfo);

  file.print(arduinoValues[0]); file.print(",");
  file.print(arduinoValues[1]); file.print(",");
  file.print(arduinoValues[2]); file.print(",");
  file.print(arduinoValues[3]); file.print(",");
  file.print(arduinoValues[4]); file.print(",");
  file.print(pm25, 1);          file.print(",");
  file.print(pm10, 1);          file.print(",");
  file.println(timeString);

  file.close();
  Serial.println(" 数据已写入 sensor_data.csv");
}

// ========== 14) setup() 函数 ==========
void setup() {
  Serial.begin(115200);
  Serial.println("===== ESP32: Starting =====");

  // 初始化 OLED 显示器
  setupDisplay();

  // 连接 WiFi
  Serial.print("正在连接 WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n WiFi 已连接!");
  Serial.print(" IP 地址: ");
  Serial.println(WiFi.localIP());

  // 同步 NTP 时间
  setupTime();

  // 初始化串口
  Serial2.begin(115200, SERIAL_8N1, ARDUINO_RX_PIN, ARDUINO_TX_PIN);
  Serial.println("Serial2 (Arduino) 已初始化.");
  sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
  Serial.println("SDS011 串口已初始化.");

  // 设置 SDS011 为主动上报模式
  sds011.setActiveReportingMode();

  previousDataTime = millis();
  previousPageTime = millis();

  // 初始化蜂鸣器引脚（蜂鸣器为被动蜂鸣器，使用 tone() 进行控制）
  pinMode(BUZZER_PIN, OUTPUT);
  // 初始化 SD 卡
  Serial.println("正在初始化 SD 卡...");
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println(" SD 卡初始化失败，无法写入文件!");
    sdInitialized = false;
  } else {
    Serial.println(" SD 卡初始化成功.");
    sdInitialized = true;
  }

  // 初次更新显示
  updateDisplay();
}

// ========== 15) loop() 函数 ==========
void loop() {
  unsigned long currentMillis = millis();

  // 每 10 秒刷新数据
  if (currentMillis - previousDataTime >= dataInterval) {
    previousDataTime = currentMillis;

    // 1) 读取 SDS011 数据（PM2.5 和 PM10）
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
      pm25 = pm.pm25;
      pm10 = pm.pm10;
      Serial.printf("SDS011: PM2.5=%.1f, PM10=%.1f\n", pm25, pm10);
    } else {
      Serial.println("SDS011 数据读取失败.");
    }

    // 2) 读取 Arduino 数据（从 Serial2 获取）
    if (Serial2.available()) {
      String data = Serial2.readStringUntil('\n');
      Serial.println("收到 Arduino 数据: " + data);
      int values[5];
      int index = 0;
      char *ptr = strtok((char*)data.c_str(), ",");
      while (ptr != NULL && index < 5) {
        values[index++] = atoi(ptr);
        ptr = strtok(NULL, ",");
      }
      if (index == 5) {
        for (int i = 0; i < 5; i++) {
          arduinoValues[i] = values[i];
        }
        Serial.printf("Arduino: MQ2=%d, CO=%d, NO2=%d, NH3=%d, CO2=%d\n",
                      arduinoValues[0], arduinoValues[1],
                      arduinoValues[2], arduinoValues[3],
                      arduinoValues[4]);
      } else {
        Serial.println("Arduino 数据解析错误!");
      }
    } else {
      Serial.println("未收到 Arduino 数据.");
    }

    // 3) 更新 OLED 显示 (仅显示 Arduino 数据)
    updateDisplay();
    previousPageTime = currentMillis;

    // 4) 上传数据到服务器
    sendToServer();

    // 5) 写入 SD 卡（附加时间戳）
    writeDataToSD();

    // 6) 判断是否超出阈值，并触发蜂鸣器
    needAlarm = false;
    if (arduinoValues[0] > THRESHOLD_MQ2) needAlarm = true; // MQ2
    if (arduinoValues[1] > THRESHOLD_CO)  needAlarm = true; // CO
    if (arduinoValues[2] > THRESHOLD_NO2) needAlarm = true; // NO2
    if (arduinoValues[3] > THRESHOLD_NH3) needAlarm = true; // NH3
    if (arduinoValues[4] > THRESHOLD_CO2) needAlarm = true; // CO2
    if (pm25 > THRESHOLD_PM25)            needAlarm = true; // PM2.5
    if (pm10 > THRESHOLD_PM10)            needAlarm = true; // PM10

    if (needAlarm) {
      Serial.println(" Sensor values exceed thresholds, triggering alarm beep!");
      // 使用 tone() 生成 4000Hz、300ms 的蜂鸣声
      tone(BUZZER_PIN, 4000, 300);
    } else {
      // 停止蜂鸣器发声
      noTone(BUZZER_PIN);
      Serial.println("Sensor values are normal, no alarm.");
    }
  }

  // 此处可添加其他周期性任务
  delay(100);
}
								Air Quality Dashboard更新
<template>
    <div class="dashboard-container">
        <div class="top-row">
            <div class="who-section">
                <h3>WHO Reference Data</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>WHO Standard</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item, idx) in whoData" :key="idx">
                            <td>{{ item.param }}</td>
                            <td>{{ item.standard }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="right-section">
                <div class="sensor-section">
                    <h3>Current Sensor Data</h3>
                    <table class="sensor-table">
                        <tbody>
                            <tr><td>Combustible Gas:</td><td>{{ sensorData.mq2 }} ppm</td></tr>
                            <tr><td>CO:</td><td>{{ sensorData.co }} ppm</td></tr>
                            <tr><td>NO2:</td><td>{{ sensorData.no2 }} ppb</td></tr>
                            <tr><td>NH3:</td><td>{{ sensorData.nh3 }} ppb</td></tr>
                            <tr><td>CO2:</td><td>{{ sensorData.co2 }} ppm</td></tr>
                            <tr><td>PM2.5:</td><td>{{ sensorData.pm25 }} µg/m³</td></tr>
                            <tr><td>PM10:</td><td>{{ sensorData.pm10 }} µg/m³</td></tr>
                            <tr v-if="sensorData.timestamp">
                                <td>Time:</td>
                                <td>{{ new Date(sensorData.timestamp).toLocaleString() }}</td>
                            </tr>
                        </tbody>
                    </table>
                    <button class="refresh-button" @click="fetchSensorData">Refresh Data</button>
                </div>
            </div>
        </div>
        <div class="chart-section">
            <line-chart :chart-data="chartData" :options="chartOptions"/>
        </div>
    </div>
</template>

<script>
import axios from 'axios'
import LineChart from './lineChart.vue'
export default {
    name: 'AirQualityDashboard',
    components: {
        'line-chart': LineChart
    },
    data() {
        return {
            chartData: {
                labels: [],
                datasets: [
                    { label: 'PM2.5 (µg/m³)',  borderColor: '#36A2EB', data: [] },
                    { label: 'PM10 (µg/m³)',   borderColor: '#FF6384', data: [] },
                    { label: 'CO (ppm)',      borderColor: '#4BC0C0', data: [] },
                    { label: 'NO2 (ppb)',     borderColor: '#FFCE56', data: [] },
                    { label: 'NH3 (ppb)',     borderColor: '#556270', data: [] },
                    { label: 'MQ2 (ppm)',    borderColor: '#C779D0', data: [] },
                    { label: 'CO2 (ppm)',       borderColor: '#2ECC71', data: [] }
                ]
            },
            chartOptions: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: { display: true, text: 'Time' }
                    },
                    y: {
                        title: { display: true, text: 'Concentration' }
                    }
                }
            },
            whoData: [
                { param: 'Combustible Gas', standard: 'Recommended < 300 ppm' },
                { param: 'CO',    standard: '15 min: 87 ppm, 1 hr: 30 ppm, 8 hr: 9 ppm, 24 hr: 6 ppm' },
                { param: 'NO2',   standard: '1h: ~106 ppb, Annual: ~21 ppb' },
                { param: 'NH3',   standard: 'recommended < 1000 ppb' },
                { param: 'CO2',   standard: 'Recommended < 1000 ppm' },
                { param: 'PM2.5', standard: '24h: 25 µg/m³, Annual: 10 µg/m³' },
                { param: 'PM10',  standard: '24h: 50 µg/m³, Annual: 20 µg/m³' }
            ],
            sensorData: {
                mq2: 0,
                co: 0,
                no2: 0,
                nh3: 0,
                co2: 0,
                pm25: 0,
                pm10: 0,
                timestamp: ''
            }
        }
    },
    methods: {
        fetchSensorData() {
            axios.get('http://192.168.137.1:3000/data')
              .then(res => {
                    const data = res.data
                    this.sensorData = data
                    const label = data.timestamp ? new Date(data.timestamp).toLocaleTimeString() : new Date().toLocaleTimeString()
                    this.chartData.labels.push(label)
                    this.chartData.datasets[0].data.push(data.pm25)
                    this.chartData.datasets[1].data.push(data.pm10)
                    this.chartData.datasets[2].data.push(data.co)
                    this.chartData.datasets[3].data.push(data.no2)
                    this.chartData.datasets[4].data.push(data.nh3)
                    this.chartData.datasets[5].data.push(data.mq2)
                    this.chartData.datasets[6].data.push(data.co2)

                    if (this.chartData.labels.length > 10) {
                        this.chartData.labels.shift()
                        this.chartData.datasets.forEach(ds => ds.data.shift())
                    }
                })
              .catch(err => {
                    console.error('Error fetching sensor data:', err)
                })
        },
        startTimer() {
            setInterval(() => {
                this.fetchSensorData()
            }, 10000)
        }
    },
    mounted() {
        this.fetchSensorData()
        this.startTimer()
    }
}
</script>

<style scoped>
.dashboard-container {
    font-size: 32px;
    display: flex;
    flex-direction: column;
    gap: 20px;
    height: 500px;
}

.top-row {
    display: flex;
    gap: 20px;
}

.chart-section {
    flex: 1;
    border: 1px solid #ccc;
    position: relative;
}

.who-section {
    flex: 1;
    width: 300px;
    border: 1px solid #ccc;
    padding: 10px;
}

.who-section table {
    width: 100%;
    border-collapse: collapse;
}

.who-section th, .who-section td {
    border: 1px solid #aaa;
    padding: 6px;
    text-align: left;
}

.right-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.sensor-section {
    height: 100%;
    border: 1px solid #ccc;
    padding: 10px;
}

.sensor-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 10px;
}

.sensor-table td {
    padding: 4px 8px;
}

.buttontest {
    font-size: 20px;
    padding: 10px 20px;
    margin-top: 20px;
    cursor: pointer;
}
.refresh-button {
    background-color: #007BFF;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.refresh-button:hover {
    background-color: #0056b3;
}
</style>    
							line chart.vue
<template>
  <div ref="chartRef" style="width: 100%; height: 400px;"></div>
</template>

<script>
import { markRaw } from 'vue';
import * as echarts from 'echarts';

export default {
  props: {
    chartData: {
      type: Object,
      required: true
    },
    options: {
      type: Object,
      required: true
    },
    test:{
      type:String
    }
  },
  data() {
    return {
      myChart: null
    };
  },
  mounted() {
    this.initChart();
  },
  watch: {
    chartData: {
      handler() {
        this.updateChart();
      },
      deep: true
    },
    options: {
      handler() {
        this.updateChart();
      },
      deep: true
    }
  },
  methods: {
    initChart() {
      const chartRef = this.$refs.chartRef;
      this.myChart = markRaw(echarts.init(chartRef));
      const option = this.generateChartOption();  
      console.log(option);
      
      this.myChart.setOption(option);
    },
    updateChart() {
      if (this.myChart) {
        const option = this.generateChartOption();
        this.myChart.setOption(option, true);
      }
    },
    generateChartOption() {
      return {
        tooltip: {
          trigger: 'axis'
        },
        legend: {
          data: this.chartData.datasets.map(dataset => dataset.label)
        },
        xAxis: {
          type: 'category',
          data: this.chartData.labels,
          name: this.options.scales.x.title.text
        },
        yAxis: {
          type: 'value',
          name: this.options.scales.y.title.text
        },
        series: this.chartData.datasets.map(dataset => ({
          name: dataset.label,
          type: 'bar',
          data: dataset.data,
          lineStyle: {
            color: dataset.borderColor
          },
          itemStyle: {
            color: dataset.borderColor
          },
          areaStyle: {
            color: dataset.backgroundColor
          },
          fill: dataset.fill
        }))
      };
    }
  }
};
</script>    
										APP.vue更新
<template>
  <div id="app">
    <!-- 下方插入我们的 AirQualityDashboard -->
    <AirQualityDashboard />
  </div>
</template>

<script>
import AirQualityDashboard from './components/AirQualityDashboard.vue'

export default {
  name: 'App',
  components: {
    AirQualityDashboard
  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  text-align: center;
  color: #2c3e50;
  margin-top: 0;
}
nav a {
  margin: 0 10px;
  font-weight: bold;
  color: #2c3e50;
}
nav a.router-link-exact-active {
  color: #42b983;
}
</style>
							ESP32代码更新
#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SdsDustSensor.h>
#include <SPI.h>
#include <SD.h>
#include <time.h> // 用于 NTP 时间同步

// ========== 1) WiFi 配置 ==========
const char* ssid = "HCSS";          // 你的 WiFi 名称
const char* password = "123456789"; // 你的 WiFi 密码
const char* serverUrl = "http://192.168.137.1:3000/upload"; // 你的服务器地址

// ========== 2) NTP 配置 ==========
const char* ntpServer = "pool.ntp.org"; // NTP 服务器
const long gmtOffset_sec = 8 * 3600;      // UTC+8 (中国)
const int daylightOffset_sec = 0;         // 无夏令时

// ========== 3) OLED 屏幕配置 ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET   -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("OLED 显示初始化失败!"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();
}

// ========== 4) 串口定义 ==========
#define ARDUINO_RX_PIN 4   // Arduino TX -> ESP32 GPIO4
#define ARDUINO_TX_PIN 17  // Arduino RX -> ESP32 GPIO17
#define SDS011_RX_PIN 25   // SDS011 TX -> ESP32 GPIO25
#define SDS011_TX_PIN 26   // SDS011 RX -> ESP32 GPIO26

// ========== 5) 全局变量 ==========
int arduinoValues[5] = {0, 0, 0, 0, 0}; // 原始数据：MQ-2, CO, NO2, NH3, CO2
float pm25 = 0.0, pm10 = 0.0;           // SDS011 数据

// 添加页面控制变量：0 表示显示 Arduino 数据（经过调整），1 表示显示 SDS011 数据
int currentPage = 0;

// ========== 6) 定时器 ==========
unsigned long previousDataTime = 0;
const unsigned long dataInterval = 10000; // 每 10 秒刷新一次数据
unsigned long previousPageTime = 0;
const unsigned long pageInterval = 5000;  // 每 5 秒切换一次显示页面

// ========== 7) OLED 显示函数 ==========
// 显示 Arduino 数据（调整后数据，与前端一致）：
void displayArduinoData() {
  // 计算调整后的数据
  float coAdjusted  = arduinoValues[1] * 0.1; // CO: 原始值×0.1, 单位 ppm
  float no2Adjusted = arduinoValues[2] * 0.1; // NO2: 原始值×0.1, 单位 ppb
  float co2Adjusted = arduinoValues[4] / 2.0; // CO2: 原始值÷2, 单位 ppm

  display.clearDisplay();

  // 第1行：Combustible Gas (MQ-2)
  display.setCursor(0, 0);
  display.print("Gas: ");
  display.print(arduinoValues[0]);
  display.print(" ppm");

  // 第2行：CO
  display.setCursor(0, 8);
  display.print("CO: ");
  display.print(coAdjusted, 1);
  display.print(" ppm");

  // 第3行：NO2
  display.setCursor(0, 16);
  display.print("NO2: ");
  display.print(no2Adjusted, 1);
  display.print(" ppb");

  // 第4行：NH3 (保持原值，单位 ppb)
  display.setCursor(0, 24);
  display.print("NH3: ");
  display.print(arduinoValues[3]);
  display.print(" ppb");

  // 第5行：CO2
  display.setCursor(0, 32);
  display.print("CO2: ");
  display.print(co2Adjusted, 1);
  display.print(" ppm");

  display.display();
}

// 显示 SDS011 数据（仅 PM2.5 与 PM10）
void displaySDS011Data() {
  display.clearDisplay();

  display.setCursor(0, 0);
  display.print("PM2.5: ");
  display.print(pm25 + 10, 1);
  display.print(" ug/m3");

  display.setCursor(0, 8);
  display.print("PM10: ");
  display.print(pm10 + 10, 1);
  display.print(" ug/m3");

  display.display();
}

// 根据 currentPage 切换显示内容
void updateDisplay() {
  if (currentPage == 0) {
    displayArduinoData();
  } else {
    displaySDS011Data();
  }
}

// ========== 8) SDS011 传感器对象 ==========
HardwareSerial sdsSerial(1);
SdsDustSensor sds011(sdsSerial);

// ========== 9) WiFi 数据上传函数 ==========
void sendToServer() {
  // 构造 JSON 数据，采用与前端一致的调整
  String jsonData = "{";
  jsonData += "\"mq2\":"  + String(arduinoValues[0]) + ",";
  jsonData += "\"co\":"   + String(arduinoValues[1] * 0.1) + ",";
  jsonData += "\"no2\":"  + String(arduinoValues[2] * 0.1) + ",";
  jsonData += "\"nh3\":"  + String(arduinoValues[3]) + ",";
  jsonData += "\"co2\":"  + String(arduinoValues[4] / 2.0) + ",";
  jsonData += "\"pm25\":" + String(pm25 + 10 , 1) + ",";
  jsonData += "\"pm10\":" + String(pm10 + 10 , 1);
  jsonData += "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    Serial.print("Sending JSON: ");
    Serial.println(jsonData);

    int httpResponseCode = http.POST(jsonData);
    Serial.print("HTTP Response Code: ");
    Serial.println(httpResponseCode);

    http.end();
  } else {
    Serial.println("WiFi not connected!");
  }
}

// ========== 10) SD 卡配置 ==========
#define SD_CS_PIN 5
bool sdInitialized = false;

// ========== 11) 蜂鸣器配置 ==========
#define BUZZER_PIN 16  // 蜂鸣器连接到 GPIO16

// 设置报警阈值（单位基于原始数据）
const int THRESHOLD_MQ2    = 600;
const int THRESHOLD_CO     = 1000;
const int THRESHOLD_NO2    = 1500;
const int THRESHOLD_NH3    = 1200;
const int THRESHOLD_CO2    = 2000;
const float THRESHOLD_PM25 = 25.0;
const float THRESHOLD_PM10 = 50.0;

bool needAlarm = false;

// ========== 12) NTP 时间同步 ==========
void setupTime() {
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.print("Syncing time");
  while (true) {
    time_t now = time(nullptr);
    if (now > 8 * 3600) {  // 判断是否同步成功
      Serial.println("\nTime sync OK!");
      break;
    }
    Serial.print(".");
    delay(1000);
  }
}

// ========== 13) SD 卡写入函数 ==========
void writeDataToSD() {
  if (!sdInitialized) return;

  File file = SD.open("/sensor_data.csv", FILE_APPEND);
  if (!file) {
    Serial.println("Failed to open sensor_data.csv for writing!");
    return;
  }

  if (file.size() == 0) {
    file.println("MQ2,CO,NO2,NH3,CO2,PM2.5,PM10,Time");
  }

  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  char timeString[25];
  strftime(timeString, sizeof(timeString), "%F %T", timeinfo);

  file.print(arduinoValues[0]); file.print(",");
  file.print(arduinoValues[1] * 0.1); file.print(",");
  file.print(arduinoValues[2] * 0.1); file.print(",");
  file.print(arduinoValues[3]); file.print(",");
  file.print(arduinoValues[4] / 2.0); file.print(",");
  file.print(pm25 + 10, 1);          file.print(",");
  file.print(pm10 + 10, 1);          file.print(",");
  file.println(timeString);

  file.close();
  Serial.println("Data saved to sensor_data.csv");
}

// ========== 14) setup() 函数 ==========
void setup() {
  Serial.begin(115200);
  Serial.println("===== ESP32: Starting =====");

  // 初始化 OLED 显示器
  setupDisplay();

  // 连接 WiFi
  Serial.print("Connecting WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  // 同步 NTP 时间
  setupTime();

  // 初始化串口
  Serial2.begin(115200, SERIAL_8N1, ARDUINO_RX_PIN, ARDUINO_TX_PIN);
  Serial.println("Serial2 (Arduino) ready.");
  sdsSerial.begin(9600, SERIAL_8N1, SDS011_RX_PIN, SDS011_TX_PIN);
  Serial.println("SDS011 ready.");

  // SDS011 主动模式
  sds011.setActiveReportingMode();

  previousDataTime = millis();
  previousPageTime = millis();

  // 初始化蜂鸣器引脚
  pinMode(BUZZER_PIN, OUTPUT);

  // 初始化 SD 卡
  Serial.println("Init SD...");
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("SD failed, no file logging!");
    sdInitialized = false;
  } else {
    Serial.println("SD OK.");
    sdInitialized = true;
  }

  // 初次显示
  updateDisplay();
}

// ========== 15) loop() 函数 ==========
void loop() {
  unsigned long currentMillis = millis();

  // 每 10 秒刷新数据
  if (currentMillis - previousDataTime >= dataInterval) {
    previousDataTime = currentMillis;

    // 1) 读取 SDS011 数据（PM2.5 和 PM10）
    PmResult pm = sds011.queryPm();
    if (pm.isOk()) {
      pm25 = pm.pm25;
      pm10 = pm.pm10;
      Serial.printf("SDS011: PM2.5=%.1f, PM10=%.1f\n", pm25, pm10);
    } else {
      Serial.println("SDS011 read failed.");
    }

    // 2) 读取 Arduino 数据（从 Serial2 获取）
    if (Serial2.available()) {
      String data = Serial2.readStringUntil('\n');
      Serial.println("Got Arduino data: " + data);
      int values[5];
      int index = 0;
      char *ptr = strtok((char*)data.c_str(), ",");
      while (ptr != NULL && index < 5) {
        values[index++] = atoi(ptr);
        ptr = strtok(NULL, ",");
      }
      if (index == 5) {
        for (int i = 0; i < 5; i++) {
          arduinoValues[i] = values[i];
        }
        Serial.printf("Arduino: MQ2=%d, CO=%d, NO2=%d, NH3=%d, CO2=%d\n",
                      arduinoValues[0], arduinoValues[1],
                      arduinoValues[2], arduinoValues[3],
                      arduinoValues[4]);
      } else {
        Serial.println("Arduino data parse error!");
      }
    } else {
      Serial.println("No Arduino data.");
    }

    // 3) 更新 OLED 显示（根据当前页面显示相应数据）
    updateDisplay();

    // 页面切换：每 5 秒切换一次显示页面
    if (currentMillis - previousPageTime >= pageInterval) {
      previousPageTime = currentMillis;
      currentPage = (currentPage + 1) % 2;
      updateDisplay();
    }

    // 4) 上传数据到服务器
    sendToServer();

    // 5) 写入 SD 卡（附加时间戳）
    writeDataToSD();

    // 6) 判断是否超出阈值，并触发蜂鸣器（报警判断基于原始数据）
    needAlarm = false;
    if (arduinoValues[0] > THRESHOLD_MQ2) needAlarm = true; // MQ2
    if (arduinoValues[1] > THRESHOLD_CO)  needAlarm = true; // CO
    if (arduinoValues[2] > THRESHOLD_NO2) needAlarm = true; // NO2
    if (arduinoValues[3] > THRESHOLD_NH3) needAlarm = true; // NH3
    if (arduinoValues[4] > THRESHOLD_CO2) needAlarm = true; // CO2
    if (pm25 > THRESHOLD_PM25)            needAlarm = true; // PM2.5
    if (pm10 > THRESHOLD_PM10)            needAlarm = true; // PM10

    if (needAlarm) {
      Serial.println("Sensor values exceed thresholds, triggering alarm beep!");
      tone(BUZZER_PIN, 4000, 300);
    } else {
      noTone(BUZZER_PIN);
      Serial.println("Values normal, no alarm.");
    }
  }

  delay(100);
}
